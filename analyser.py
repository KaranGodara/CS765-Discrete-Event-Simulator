import networkx as nx
import csv
import matplotlib.pyplot as plt
import pydot
from networkx.drawing.nx_pydot import graphviz_layout
import argparse

# Read the graph from the file
# Assumed format: BLOCK ID,TIME STAMP,PARENT ID,MINER,SLOW,LOW_CPU
def read_graph(file="output/temp.txt"):
    id_to_virt = {}
    virt_to_miner = {}
    miner = {}
    i = 1
    G = nx.DiGraph()
    with open(file , "r") as f:
        reader = csv.reader(f)
        next(reader)
        rows = list(reader)
        rows.sort(key=lambda x: float(x[1]))
        for row in rows:
            id_to_virt[row[0]] = i
            virt_to_miner[i] = int(row[3])
            miner[int(row[3])] = (int(row[4]), int(row[5]))
            i += 1
            G.add_node(id_to_virt[row[0]], label=id_to_virt[row[0]])
            if row[2] != "NULL":
                G.add_edge(id_to_virt[row[2]], id_to_virt[row[0]])
    return G, virt_to_miner, miner

# This function would return the longest path in the blockchain and ratio of number of blocks generated by each peer in longest chain to total numebr of generated block 
def longest_chain_ratios(G, n, v_m):
    ratio = [0]*n
    total = [0]*(n+1)
    longest = [0]*(n+1)
    for node in G.nodes():
        total[v_m[node]]+=1
    for node in nx.dag_longest_path(G):
        longest[v_m[node]]+=1
    for i in range(n):
        ratio[i] = longest[i]/total[i] if total[i]!=0 else 'ND'
    return nx.dag_longest_path(G), ratio

# This function generates the graph from the blockchain in the file and plots the graph
def plot_graph(file="output/temp.txt"):
    G, d, m = read_graph(file)
    pos = graphviz_layout(G, prog="dot")
    nx.draw(G, pos, with_labels=True, node_size=200, node_color="hotpink", node_shape="o", alpha=0.8, linewidths=1, font_size=8, font_color="black", font_family="monospace", edge_color="green", width=1, arrows=True, arrowsize=8, arrowstyle="-|>", connectionstyle="arc3")
    plt.savefig('blockchain.png')

if __name__ == "__main__":
    argparser = argparse.ArgumentParser(description='Analyser for the blockchain')
    argparser.add_argument('--file', type=str, default="output/blockchain_1.txt", help='File containing the blockchain')
    argparser.add_argument('--plot', type=bool, default=True, help="Plot blockchain tree")
    argparser.add_argument('--n', type=int, default=10, help='Number of peers in the network')

    args = argparser.parse_args()
    if args.plot:
        plot_graph(args.file)
    G, d, m = read_graph(file="output/blockchain_1.txt")
    lc, rat = longest_chain_ratios(G, args.n, d)
    print("Longest path: ", lc)
    print("Ratios: ", rat)
