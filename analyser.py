import networkx as nx
import csv
import matplotlib.pyplot as plt
import pydot
from networkx.drawing.nx_pydot import graphviz_layout
import argparse

# Read the graph from the file
# Assumed format: BLOCK ID,TIME STAMP,PARENT ID,MINER,SLOW,LOW_CPU
def read_graph(file="output/temp.txt"):
    id_to_virt = {} # Mapping from block ID to virtual node ID that would be used in the graph
    virt_to_miner = {} # Mapping from virtual node ID to miner ID who mined the block
    miner = {} # Mapping from miner ID to (slow, low_cpu)
    i = 1
    G = nx.DiGraph()
    with open(file , "r") as f:
        reader = csv.reader(f)
        next(reader)
        rows = list(reader)
        rows.sort(key=lambda x: float(x[1])) # Sorting the rows based on time stamp
        for row in rows:
            id_to_virt[row[0]] = i
            virt_to_miner[i] = int(row[3])
            miner[int(row[3])] = (int(row[4]), int(row[5]))
            i += 1
            G.add_node(id_to_virt[row[0]], label=id_to_virt[row[0]]) # Adding node to the graph
            if row[2] != "NULL": # If this is not the genesis block
                G.add_edge(id_to_virt[row[2]], id_to_virt[row[0]]) # Adding edge to the graph 
    return G, virt_to_miner, miner

# This function would return the longest path in the blockchain and ratio of number of blocks generated by each peer in longest chain to total numebr of generated block 
def longest_chain_ratios(G, n, v_m):
    ratio = [0]*n # Ratio of number of blocks generated by each peer in longest chain to total number of generated block
    total = [0]*(n+1) # Total number of blocks generated by each peer
    longest = [0]*(n+1) # Number of blocks generated by each peer in longest chain
    for node in G.nodes():
        total[v_m[node]]+=1
    for node in nx.dag_longest_path(G):
        longest[v_m[node]]+=1
    for i in range(n): # Calculating the ratio if total number of blocks generated by a peer is not 0
        ratio[i] = longest[i+1]/total[i+1] if total[i]!=0 else 'ND'
    return nx.dag_longest_path(G), ratio

# This function generates the graph from the blockchain in the file and plots the graph
def plot_graph(file="output/temp.txt"):
    G, d, m = read_graph(file)
    pos = graphviz_layout(G, prog="dot")
    nx.draw(G, pos, with_labels=True, node_size=200, node_color="hotpink", node_shape="o", alpha=0.8, linewidths=1, font_size=8, font_color="black", font_family="monospace", edge_color="green", width=1, arrows=True, arrowsize=8, arrowstyle="-|>", connectionstyle="arc3")
    plt.savefig('blockchain.png')

if __name__ == "__main__":
    # Creating ArgumentParser object
    argparser = argparse.ArgumentParser(description='Analyser for the blockchain')
    argparser.add_argument('--file', type=str, default="output/blockchain_1.txt", help='File containing the blockchain')
    argparser.add_argument('--plot', type=bool, default=True, help="Plot blockchain tree")
    argparser.add_argument('--n', type=int, default=10, help='Number of peers in the network')
    args = argparser.parse_args()

    if args.plot:
        plot_graph(args.file)
    
    # Generate statistics
    G, d, m = read_graph(file="output/blockchain_1.txt")
    lc, rat = longest_chain_ratios(G, args.n, d)
    print("Longest path: ", lc)
    print("Ratios: ", rat)
